service: biblebrain-services

frameworkVersion: "3"
useDotenv: true
provider:
  name: aws
  vpc:
    securityGroupIds:
      - ${self:custom.securityGroupId.${self:provider.stage}}
    subnetIds:
      - ${self:custom.subnetId1.${self:provider.stage}}
      - ${self:custom.subnetId2.${self:provider.stage}}
  httpApi:
    # Payload format version (note: use quotes in YAML: '1.0' or '2.0') (default: '2.0')
    payload: "1.0"
    # Enable detailed CloudWatch metrics (default: false)
    metrics: true
    # Enable CORS HTTP headers with default settings (allow all)
    # Can be fine-tuned with specific options
    cors: true
  logs:
    # Enable HTTP API logs
    # This can either be set to `httpApi: true` to use defaults, or configured via subproperties
    # Can only be configured if the API is created by Serverless Framework
    httpApi:
      format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
  iam:
    role: biblebrain-services-lambda-role-${opt:stage, 'dev'}
  # statements:
  #   - Effect: Allow
  #     Action:
  #       - ssm:GetParameter
  #     Resource: "*"
  runtime: ${self:custom.runtimeMap.${self:provider.stage}}
  stage: ${opt:stage, 'dev'}
  region: ${env:AWS_REGION, 'us-west-2'}
  environment:
    BIBLEBRAIN_DSN_SSM_ID: /${self:provider.stage}/biblebrain-services/rds/DSN

package:
  patterns:
    - "!./**"
    - ./bin/**
    - "./bootstrap" # include the root-level bootstrap binary

functions:
  bservice:
    url: true
    handler: bootstrap
    timeout: 10
    memorySize: 128
    events:
      - httpApi:
          path: /api/copyright
          method: get
      - httpApi:
          path: /api/status
          method: get

custom:
  stages:
    - local
    - dev
    - prod
  runtimeMap:
    local: provided # use plain “provided” when running offline locally
    dev: provided.al2023
    prod: provided.al2023
  serverless-offline:
    useDocker: true
    lambdaPort: 8080
    lambdaHost: lambda # resolves to the `lambda` service in Docker Compose
    dockerHost: host.docker.internal
    dockerNetwork: bridge
    localEnvironment: true
  serverless-offline-ssm:
    stages:
      - local
    ssm:
      "/local/biblebrain/sql/dsn-otc00l0j3b9ggbgc": ${env:BIBLEBRAIN_DSN, "xxx"}
  securityGroupId:
    local: sg-local
    dev: sg-00da5d8c7d42e1559
    prod: sg-07ed4cf239758b0e8
  subnetId1:
    local: subnet-local
    dev: subnet-0514270361bd9075e
    prod: subnet-03350bfd970a16ba1
  subnetId2:
    local: subnet-local
    dev: subnet-058e5e5335948eaac
    prod: subnet-0e2a671cac564cd63
  prune:
    automatic: true
    number: 3

plugins:
  - serverless-offline-ssm
  - serverless-offline
  - serverless-stage-manager
  - serverless-prune-plugin
  - serverless-s3-local

resources:
  Resources:
    blimpSSMParameterAPIGatewayId:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.stage}/biblebrain-services/api-gateway-id
        Type: String
        Value:
          Fn::GetAtt:
            - "HttpApi"
            - "ApiId"
        Tags:
          Environment: ${self:provider.stage}
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: biblebrain-services-lambda-role-${opt:stage, 'dev'}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LambdaExecutionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                    - logs:TagResource
                  Resource:
                    - arn:aws:logs:us-west-2:078432969830:log-group:/aws/lambda/biblebrain-services-${opt:stage, 'dev'}:*
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                  Resource:
                    - arn:aws:logs:us-west-2:078432969830:log-group:/aws/lambda/biblebrain-services-${opt:stage, 'dev'}:*:*
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                  Resource: "*"
